{"ast":null,"code":"var _jsxFileName = \"D:\\\\areda\\\\Weather\\\\weatherapp\\\\src\\\\WeatherDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport ForecastData from \"./ForecastData\";\nimport CurrentData from \"./CurrentData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherDisplay() {\n  _s();\n\n  // the city input and the day input and History input\n  const [City, setCity] = useState(null);\n  const [citiesfromapi, setCities] = useState(null);\n  const [days, setDays] = useState(\"\");\n  const [check, setCheck] = useState(false); //the json data for the city validator\n\n  const jsonarray = [];\n  const [Cities, setCitie] = useState(null); //the weather data receiver\n\n  const [weather, setWeather] = useState(null);\n  const [theforecast, settheForecast] = useState(null); //the renderers depending on the filters used.\n\n  const message = \"Please enter a correct city!\"; //booleans for rendering different data\n\n  const [current, setCurrent] = useState(false);\n  const [Forecast, setForecast] = useState(false); //interface for post request data\n\n  const data = {\n    City: City,\n    Days: days\n  }; //pushs all cities in world into array\n\n  const filterer = Cities && Cities.filter(item => jsonarray.push(item.name)); //returns true if city entered is actually a city.\n\n  const checks = jsonarray.some(x => data.City === x);\n  const timingofthecurrentday = weather && weather.forecast.forecastday.map(item => item.astro);\n  const astronomicalInfo = timingofthecurrentday && timingofthecurrentday[1];\n  useEffect(() => {\n    axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\").then(res => res.data).then(res2 => setCitie(res2.reduce((prev, curr) => [...prev, ...curr.cities], [])));\n  }, []);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000\").then(res => console.log(res)).catch(err => console.log(\"request failed\"));\n  }, []);\n\n  const handleClick = e => {\n    e.preventDefault();\n\n    if (data.City === \"\" && data.Days === \"\") {\n      console.log(\"empty strings not allowed\");\n    } else {\n      axios.post(\"http://localhost:5000\", data).then(res => setWeather(res.data)).catch(err => console.log(err));\n    }\n  };\n\n  const handlechangeCity = e => {\n    setCity(e.target.value);\n  };\n\n  const handlechangeDays = e => {\n    setDays(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-h-full justify-center items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: [checks === false ? \"Enter the correct city\" : null, /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"City\",\n              placeholder: \"City\",\n              onChange: handlechangeCity,\n              className: checks === false ? \"border-2 border-rose-600 rounded-xl\" : \"border-2 border-green-600 rounded-xl\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this), Forecast && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"Days\",\n              placeholder: \"Number of days\",\n              onChange: handlechangeDays,\n              className: \"ml-16 rounded-xl\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"mt-12 border-2 rounded-xl p-3 hover:scale-105\",\n                onClick: handleClick,\n                children: \"Press here to send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-9 min-h-[200px] border-2 border-white rounded-xl p-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-5xl underline\",\n            children: \"Modes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"block mt-5\",\n            onClick: () => setForecast(false),\n            children: \"Current Weather\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setForecast(true);\n            },\n            className: \"p-4\",\n            children: \"Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), weather && Forecast === false && /*#__PURE__*/_jsxDEV(CurrentData, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 46\n      }, this), weather && Forecast && /*#__PURE__*/_jsxDEV(ForecastData, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(WeatherDisplay, \"3tzUHdpf2ze/KCgOT/hlYG8w4/I=\");\n\n_c = WeatherDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"sources":["D:/areda/Weather/weatherapp/src/WeatherDisplay.tsx"],"names":["axios","useState","useEffect","ForecastData","CurrentData","WeatherDisplay","City","setCity","citiesfromapi","setCities","days","setDays","check","setCheck","jsonarray","Cities","setCitie","weather","setWeather","theforecast","settheForecast","message","current","setCurrent","Forecast","setForecast","data","Days","filterer","filter","item","push","name","checks","some","x","timingofthecurrentday","forecast","forecastday","map","astro","astronomicalInfo","get","then","res","res2","reduce","prev","curr","cities","console","log","catch","err","handleClick","e","preventDefault","post","handlechangeCity","target","value","handlechangeDays"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {useState, useEffect, useMemo, SetStateAction} from \"react\"\r\nimport ForecastData from \"./ForecastData\"\r\nimport CurrentData from \"./CurrentData\"\r\n\r\nexport default function WeatherDisplay() {\r\n\r\n    \r\n    interface Data {\r\n        [country: string]: string[]\r\n    }\r\n    // the city input and the day input and History input\r\n    const [City, setCity] = useState(null)\r\n    const [citiesfromapi, setCities] = useState(null)\r\n    const [days, setDays] = useState(\"\")\r\n    const [check, setCheck] = useState(false)\r\n    \r\n    \r\n    \r\n    //the json data for the city validator\r\n    const jsonarray = []\r\n    const [Cities, setCitie] = useState(null)\r\n\r\n    //the weather data receiver\r\n    const [weather, setWeather] = useState<any>(null)\r\n    const [theforecast, settheForecast] = useState(null)\r\n\r\n    //the renderers depending on the filters used.\r\n    const message = \"Please enter a correct city!\"\r\n\r\n    //booleans for rendering different data\r\n    const [current, setCurrent] = useState(false)\r\n    const [Forecast, setForecast] = useState(false)\r\n\r\n    //interface for post request data\r\n    const data: { City: string, Days: string} = {\r\n        City: City,\r\n        Days: days,\r\n\r\n    }\r\n\r\n    //pushs all cities in world into array\r\n    const filterer = Cities && Cities.filter(item => jsonarray.push(item.name))\r\n    //returns true if city entered is actually a city.\r\n    const checks = jsonarray.some(x => data.City === x)\r\n\r\n\r\n    const timingofthecurrentday = weather && weather.forecast.forecastday.map(item => item.astro)\r\n    const astronomicalInfo = timingofthecurrentday && timingofthecurrentday[1]\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\")\r\n            .then(res => res.data)\r\n            .then(res2 => setCitie(res2.reduce((prev, curr) => [...prev, ...curr.cities], [])))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:5000\")\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(\"request failed\"))\r\n    }, []) \r\n\r\n    const handleClick = (e: { preventDefault: () => void; }) => {\r\n        e.preventDefault();\r\n        if (data.City === \"\" && data.Days === \"\"){\r\n            console.log(\"empty strings not allowed\")}\r\n        else{\r\n            axios.post(\"http://localhost:5000\", data)\r\n           .then(res => setWeather(res.data))\r\n           .catch(err => console.log(err))\r\n        }\r\n    \r\n    }\r\n\r\n    \r\n    \r\n  \r\n    const handlechangeCity = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCity(e.target.value)}\r\n\r\n    const handlechangeDays = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDays(e.target.value)\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n        <div className=\"max-h-full justify-center items-center\">\r\n            <div className=\"flex justify-between\">\r\n        <div className=\"\">\r\n        {checks === false ? \"Enter the correct city\" : null}\r\n        <form>\r\n            <input type=\"text\" name=\"City\" placeholder=\"City\" onChange={handlechangeCity} className={checks === false ? \"border-2 border-rose-600 rounded-xl\" : \"border-2 border-green-600 rounded-xl\"}/>\r\n            {Forecast && <input type=\"text\" name=\"Days\" placeholder=\"Number of days\" onChange={handlechangeDays} className=\"ml-16 rounded-xl\" />}\r\n            <div>\r\n            <button className=\"mt-12 border-2 rounded-xl p-3 hover:scale-105\"onClick= {handleClick}>Press here to send</button>\r\n            </div>\r\n        </form>\r\n        </div>\r\n        <div className=\"mb-9 min-h-[200px] border-2 border-white rounded-xl p-3\">\r\n                <h2 className=\"text-5xl underline\">Modes</h2>\r\n                <button className=\"block mt-5\" onClick = {() => setForecast(false)}>Current Weather</button>\r\n                <button onClick={() => {setForecast(true)}} className=\"p-4\">Forecast</button>\r\n        </div>\r\n                </div>\r\n            \r\n           {weather && (Forecast===false) && <CurrentData weather={weather} />}\r\n           {weather && Forecast && <ForecastData weather = {weather}/>}\r\n        </div>\r\n        \r\n            {/* {astronomicalInfo && (\r\n                <div>\r\n                    <p>Sunrise: {astronomicalInfo.sunrise}</p>\r\n                    <p>Sunset: {astronomicalInfo.sunset}</p>\r\n                </div>\r\n            )} */}\r\n        \r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}