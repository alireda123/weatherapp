{"ast":null,"code":"var _jsxFileName = \"D:\\\\areda\\\\Webdev\\\\Weather\\\\weatherapp\\\\src\\\\WeatherDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherDisplay() {\n  _s();\n\n  // the city input and the day input\n  const [City, setCity] = useState(null);\n  const [citiesfromapi, setCities] = useState(null);\n  const [days, setDays] = useState(\"\"); //the json data for the city validator\n\n  const jsonarray = [];\n  const Cities = []; //the weather data receiver\n\n  const [weather, setWeather] = useState([]); //the renderers depending on the filters used.\n  // useEffect(() => {\n  //     axios.get<Data | null>(\"https://raw.githubusercontent.com/russ666/all-countries-and-cities-json/master/countries.json\")\n  //          .then(res => jsonarray.push(res.data))\n  //          .then(h => setCities(jsonarray))\n  //         .then()\n  // }, [])\n\n  useEffect(() => {\n    axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\").then(res => console.log(res.data)); //  .then(res2 => console.log(res2))\n  }, []);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000\").then(res => console.log(res)).catch(err => console.log(\"request failed\"));\n  }, []);\n\n  const checker = () => {\n    citiesfromapi && citiesfromapi.map(item => Cities.push(Object.keys(item)));\n    console.log(Cities);\n  }; //e: { preventDefault: () => void; }\n\n\n  const data = {\n    City: City,\n    Days: days\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    data.City === \"\" || data.Days === \"\" ? console.log(\"empty strings not allowed\") : axios.post(\"http://localhost:5000\", data).then(res => setWeather(res.data)).then(res2 => console.log(weather)) //         .then(res => setCity(\"\"))\n    //        .then(res2 => setDays(\"\"))\n    .catch(err => console.log(err));\n  };\n\n  weather && console.log(weather);\n\n  const handlechangeCity = e => {\n    setCity(e.target.value);\n  };\n\n  const handlechangeDays = e => {\n    setDays(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex max-h-full justify-center items-center bg-slate-600\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"City\",\n          placeholder: \"City\",\n          onChange: handlechangeCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"Days\",\n          placeholder: \"Number of days\",\n          onChange: handlechangeDays\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClick,\n          children: \"Press here to send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WeatherDisplay, \"QD6mMkjZATYkZZ7WKlDnnP2ZEGQ=\");\n\n_c = WeatherDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"sources":["D:/areda/Webdev/Weather/weatherapp/src/WeatherDisplay.tsx"],"names":["axios","useState","useEffect","WeatherDisplay","City","setCity","citiesfromapi","setCities","days","setDays","jsonarray","Cities","weather","setWeather","get","then","res","console","log","data","catch","err","checker","map","item","push","Object","keys","Days","handleClick","e","preventDefault","post","res2","handlechangeCity","target","value","handlechangeDays"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {useState, useEffect, useMemo, SetStateAction} from \"react\"\r\n\r\n\r\nexport default function WeatherDisplay() {\r\n\r\n    \r\n    interface Data {\r\n        [country: string]: string[]\r\n    }\r\n\r\n    // the city input and the day input\r\n    const [City, setCity] = useState(null)\r\n    const [citiesfromapi, setCities] = useState(null)\r\n    const [days, setDays] = useState(\"\")\r\n\r\n    \r\n    //the json data for the city validator\r\n    const jsonarray = []\r\n    const Cities = []\r\n\r\n    //the weather data receiver\r\n    const [weather, setWeather] = useState<any>([])\r\n\r\n    //the renderers depending on the filters used.\r\n\r\n\r\n    // useEffect(() => {\r\n    //     axios.get<Data | null>(\"https://raw.githubusercontent.com/russ666/all-countries-and-cities-json/master/countries.json\")\r\n    //          .then(res => jsonarray.push(res.data))\r\n    //          .then(h => setCities(jsonarray))\r\n    //         .then()\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\")\r\n            .then(res => console.log(res.data))\r\n          //  .then(res2 => console.log(res2))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:5000\")\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(\"request failed\"))\r\n    }, []) \r\n\r\n    const checker = () => {\r\n        citiesfromapi && citiesfromapi.map(item => Cities.push(Object.keys(item)))\r\n        \r\n        console.log(Cities)\r\n    }\r\n\r\n    \r\n\r\n    //e: { preventDefault: () => void; }\r\n\r\n    const data: {City: string, Days: string} = {\r\n        City: City,\r\n        Days: (days)\r\n    }\r\n\r\n    const handleClick = (e: { preventDefault: () => void; }) => {\r\n        e.preventDefault();\r\n        data.City === \"\" || data.Days === \"\" ? (console.log(\"empty strings not allowed\")):\r\n        (axios.post(\"http://localhost:5000\", data)\r\n          .then(res => setWeather(res.data))\r\n          .then(res2 => console.log(weather))\r\n //         .then(res => setCity(\"\"))\r\n  //        .then(res2 => setDays(\"\"))\r\n          .catch(err => console.log(err)))\r\n        }\r\n  \r\n    weather && console.log(weather)\r\n    const handlechangeCity = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCity(e.target.value)}\r\n\r\n    const handlechangeDays = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDays(e.target.value)\r\n    }\r\n    \r\n\r\n    return(\r\n        <div>\r\n        <div className=\"flex max-h-full justify-center items-center bg-slate-600\">\r\n        <form>\r\n            <input type=\"text\" name=\"City\"  placeholder= \"City\" onChange={handlechangeCity} />\r\n            <input type=\"text\" name=\"Days\" placeholder=\"Number of days\" onChange={handlechangeDays} />\r\n            <button onClick= {handleClick} >Press here to send</button>\r\n        </form>\r\n        </div>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}