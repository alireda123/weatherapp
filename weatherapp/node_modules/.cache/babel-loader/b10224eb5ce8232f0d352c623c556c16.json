{"ast":null,"code":"var _jsxFileName = \"D:\\\\areda\\\\Webdev\\\\Weather\\\\weatherapp\\\\src\\\\WeatherDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherDisplay() {\n  _s();\n\n  // the city input and the day input and History input\n  const [City, setCity] = useState(null);\n  const [citiesfromapi, setCities] = useState(null);\n  const [days, setDays] = useState(\"\");\n  const [check, setCheck] = useState(false); //the json data for the city validator\n\n  const jsonarray = [];\n  const [Cities, setCitie] = useState(null); //the weather data receiver\n\n  const [weather, setWeather] = useState(null);\n  const [daytimings, setDayTimings] = useState(null); //the renderers depending on the filters used.\n\n  const message = \"Please enter a correct city!\"; //interface for post request data\n\n  const data = {\n    City: City,\n    Days: days\n  };\n  useEffect(() => {\n    axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\").then(res => res.data).then(res2 => setCitie(res2.reduce((prev, curr) => [...prev, ...curr.cities], [])));\n  }, []);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000\").then(res => console.log(res)).catch(err => console.log(\"request failed\"));\n  }, []); //pushs all cities in world into array\n\n  const filterer = Cities && Cities.filter(item => jsonarray.push(item.name)); //returns true if city entered is actually a city.\n\n  const checks = jsonarray.some(x => data.City === x);\n\n  const handleClick = e => {\n    e.preventDefault();\n\n    if (data.City === \"\" && data.Days === \"\") {\n      console.log(\"empty strings not allowed\");\n    } else if (checks) {\n      axios.post(\"http://localhost:5000\", data).then(res => setWeather(res.data)).then(res2 => setDayTimings(res2)).catch(err => console.log(err));\n    }\n  };\n\n  const handlechangeCity = e => {\n    setCity(e.target.value);\n  };\n\n  const handlechangeDays = e => {\n    setDays(e.target.value);\n  };\n\n  const [current, setCurrent] = useState(false);\n  const [Forecast, setForecast] = useState(false);\n  const [WeatherHistory, setWeatherHistory] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [checks === false ? \"Enter the correct city\" : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex max-h-full justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"City\",\n          placeholder: \"City\",\n          onChange: handlechangeCity,\n          className: checks === false ? \"border-2 border-rose-600\" : \"border-2 border-green-600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), Forecast && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"Days\",\n          placeholder: \"Number of days\",\n          onChange: handlechangeDays\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClick,\n          children: \"Press here to send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-9 min-h-[200px] block\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"block\",\n        onClick: () => setForecast(false),\n        children: \"Current Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setForecast(true);\n        },\n        className: \"block\",\n        children: \"Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weatherdisplay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"City: \", weather.location.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Country: \", weather.location.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time: \", weather.location.localtime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weatherInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: weather.current.condition.icon,\n          alt: \"representation of the condition\",\n          width: \"150\",\n          height: \"150\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather.current.condition.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature in Celsius: \", weather.current.temp_c]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature in Fahrenheit: \", weather.current.temp_f]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Humidity: \", weather.current.humidity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WeatherDisplay, \"HM2fC1kmlrfyxpM5L3tb8D9TC2Q=\");\n\n_c = WeatherDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"sources":["D:/areda/Webdev/Weather/weatherapp/src/WeatherDisplay.tsx"],"names":["axios","useState","useEffect","WeatherDisplay","City","setCity","citiesfromapi","setCities","days","setDays","check","setCheck","jsonarray","Cities","setCitie","weather","setWeather","daytimings","setDayTimings","message","data","Days","get","then","res","res2","reduce","prev","curr","cities","console","log","catch","err","filterer","filter","item","push","name","checks","some","x","handleClick","e","preventDefault","post","handlechangeCity","target","value","handlechangeDays","current","setCurrent","Forecast","setForecast","WeatherHistory","setWeatherHistory","location","country","localtime","condition","icon","text","temp_c","temp_f","humidity"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {useState, useEffect, useMemo, SetStateAction} from \"react\"\r\n\r\n\r\nexport default function WeatherDisplay() {\r\n\r\n    \r\n    interface Data {\r\n        [country: string]: string[]\r\n    }\r\n\r\n    // the city input and the day input and History input\r\n    const [City, setCity] = useState(null)\r\n    const [citiesfromapi, setCities] = useState(null)\r\n    const [days, setDays] = useState(\"\")\r\n    const [check, setCheck] = useState(false)\r\n    \r\n    \r\n    \r\n    //the json data for the city validator\r\n    const jsonarray = []\r\n    const [Cities, setCitie] = useState(null)\r\n\r\n    //the weather data receiver\r\n    const [weather, setWeather] = useState<any>(null)\r\n    const [daytimings, setDayTimings] = useState(null)\r\n\r\n    //the renderers depending on the filters used.\r\n    const message = \"Please enter a correct city!\"\r\n\r\n    //interface for post request data\r\n    const data: { City: string, Days: string} = {\r\n        City: City,\r\n        Days: days,\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\")\r\n            .then(res => res.data)\r\n            .then(res2 => setCitie(res2.reduce((prev, curr) => [...prev, ...curr.cities], [])))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:5000\")\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(\"request failed\"))\r\n    }, []) \r\n\r\n    //pushs all cities in world into array\r\n    const filterer = Cities && Cities.filter(item => jsonarray.push(item.name))\r\n    //returns true if city entered is actually a city.\r\n    const checks = jsonarray.some(x => data.City === x)\r\n\r\n    \r\n\r\n    const handleClick = (e: { preventDefault: () => void; }) => {\r\n        e.preventDefault();\r\n        if (data.City === \"\" && data.Days === \"\"){\r\n            console.log(\"empty strings not allowed\")\r\n        } else if(checks) {\r\n           axios.post(\"http://localhost:5000\", data)\r\n          .then(res => setWeather(res.data))\r\n          .then(res2 => setDayTimings(res2))\r\n          .catch(err => console.log(err))\r\n        } \r\n    \r\n    }\r\n\r\n    \r\n    \r\n  \r\n    const handlechangeCity = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCity(e.target.value)}\r\n\r\n    const handlechangeDays = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDays(e.target.value)\r\n    }\r\n\r\n    const [current, setCurrent] = useState(false)\r\n    const [Forecast, setForecast] = useState(false)\r\n    const [WeatherHistory, setWeatherHistory] = useState(false)\r\n\r\n    return(\r\n        <div>\r\n        {checks === false ? \"Enter the correct city\": null}\r\n        <div className=\"flex max-h-full justify-center items-center\">\r\n        <form>\r\n            <input type=\"text\" name=\"City\" placeholder=\"City\" onChange={handlechangeCity} className={checks === false ? \"border-2 border-rose-600\" : \"border-2 border-green-600\"}/>\r\n            {Forecast && <input type=\"text\" name=\"Days\" placeholder=\"Number of days\" onChange={handlechangeDays} />}\r\n            <button onClick= {handleClick}>Press here to send</button>\r\n        </form>\r\n        </div>\r\n        <div className=\"mb-9 min-h-[200px] block\">\r\n                <button className=\"block\" onClick = {() => setForecast(false)}>Current Weather</button>\r\n                <button onClick={() => {setForecast(true)}} className=\"block\">Forecast</button>\r\n        </div>\r\n            {weather && (\r\n                <div>\r\n                <div className=\"weatherdisplay\">\r\n                <h1>City: {weather.location.name}</h1>\r\n                <h2>Country: {weather.location.country}</h2>\r\n                <p>Time: {weather.location.localtime}</p>\r\n                </div>\r\n                <div className=\"weatherInfo\">\r\n                <img src={weather.current.condition.icon} alt=\"representation of the condition\" width=\"150\" height=\"150\"/>\r\n                <h2>{weather.current.condition.text}</h2>\r\n                <p>Temperature in Celsius: {weather.current.temp_c}</p>\r\n                <p>Temperature in Fahrenheit: {weather.current.temp_f}</p>\r\n                <p>Humidity: {weather.current.humidity}</p>\r\n                </div>\r\n                </div>\r\n            )}  \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}