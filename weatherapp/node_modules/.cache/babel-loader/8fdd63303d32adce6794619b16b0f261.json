{"ast":null,"code":"var _jsxFileName = \"D:\\\\areda\\\\Webdev\\\\Weather\\\\weatherapp\\\\src\\\\WeatherDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherDisplay() {\n  _s();\n\n  // the city input and the day input and History input\n  const [City, setCity] = useState(null);\n  const [citiesfromapi, setCities] = useState(null);\n  const [days, setDays] = useState(\"\");\n  const [check, setCheck] = useState(false); //the json data for the city validator\n\n  const jsonarray = [];\n  const [Cities, setCitie] = useState(null); //the weather data receiver\n\n  const [weather, setWeather] = useState(null);\n  const [theforecast, settheForecast] = useState(null); //the renderers depending on the filters used.\n\n  const message = \"Please enter a correct city!\"; //booleans for rendering different data\n\n  const [current, setCurrent] = useState(false);\n  const [Forecast, setForecast] = useState(false);\n  const [timings, setTimings] = useState(false); //interface for post request data\n\n  const data = {\n    City: City,\n    Days: days,\n    timings: timings\n  }; //pushs all cities in world into array\n\n  const filterer = Cities && Cities.filter(item => jsonarray.push(item.name)); //returns true if city entered is actually a city.\n\n  const checks = jsonarray.some(x => data.City === x);\n  const timingofthecurrentday = weather && weather.forecast.forecastday.map(item => item.astro);\n  const astronomicalInfo = timingofthecurrentday && timingofthecurrentday[1];\n  useEffect(() => {\n    axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\").then(res => res.data).then(res2 => setCitie(res2.reduce((prev, curr) => [...prev, ...curr.cities], [])));\n  }, []);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000\").then(res => console.log(res)).catch(err => console.log(\"request failed\"));\n  }, []);\n  const forecastdata = weather.forecast.forecastday.map(item => item.day);\n  console.log(forecastdata);\n\n  const handleClick = e => {\n    e.preventDefault();\n\n    if (data.City === \"\" && data.Days === \"\") {\n      console.log(\"empty strings not allowed\");\n    } // } else if(checks && data.Days === \"\"){\n    //    axios.post(\"http://localhost:5000\", data)\n    //   .then(res => setWeather(res.data))\n    //   .then(secondresponse => settheForecast(null))\n    //   .catch(err => console.log(err))\n    // } else if (checks && data.Days !== \"\") {\n    //     axios.post(\"http://localhost:5000\", data)\n    //     .then(res => settheForecast(res.data))\n    //     .then(res2 => setWeather(null))\n    //     .catch(err => console.log(err))\n    // } \n    else {\n      axios.post(\"http://localhost:5000\", data).then(res => setWeather(res.data)).catch(err => console.log(err));\n    }\n  };\n\n  const handlechangeCity = e => {\n    setCity(e.target.value);\n  };\n\n  const handlechangeDays = e => {\n    setDays(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [checks === false ? \"Enter the correct city\" : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex max-h-full justify-center items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"City\",\n            placeholder: \"City\",\n            onChange: handlechangeCity,\n            className: checks === false ? \"border-2 border-rose-600\" : \"border-2 border-green-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), Forecast && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"Days\",\n            placeholder: \"Number of days\",\n            onChange: handlechangeDays\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleClick,\n            children: \"Press here to send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-9 min-h-[200px] block\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"block\",\n          onClick: () => setForecast(false),\n          children: \"Current Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setForecast(true);\n          },\n          className: \"block\",\n          children: \"Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setTimings(true);\n          },\n          className: \"block\",\n          children: \"Timings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), weather && Forecast === false && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weatherdisplay\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"City: \", weather.location.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Country: \", weather.location.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time: \", weather.location.localtime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weatherInfo\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: weather.current.condition.icon,\n            alt: \"representation of the condition\",\n            width: \"150\",\n            height: \"150\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: weather.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature in Celsius: \", weather.current.temp_c]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature in Fahrenheit: \", weather.current.temp_f]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Humidity: \", weather.current.humidity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), weather && Forecast && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), astronomicalInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sunrise: \", astronomicalInfo.sunrise]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sunset: \", astronomicalInfo.sunset]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WeatherDisplay, \"7cSfnUoxEpAlO10KsG5THTDb9L4=\");\n\n_c = WeatherDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"sources":["D:/areda/Webdev/Weather/weatherapp/src/WeatherDisplay.tsx"],"names":["axios","useState","useEffect","WeatherDisplay","City","setCity","citiesfromapi","setCities","days","setDays","check","setCheck","jsonarray","Cities","setCitie","weather","setWeather","theforecast","settheForecast","message","current","setCurrent","Forecast","setForecast","timings","setTimings","data","Days","filterer","filter","item","push","name","checks","some","x","timingofthecurrentday","forecast","forecastday","map","astro","astronomicalInfo","get","then","res","res2","reduce","prev","curr","cities","console","log","catch","err","forecastdata","day","handleClick","e","preventDefault","post","handlechangeCity","target","value","handlechangeDays","location","country","localtime","condition","icon","text","temp_c","temp_f","humidity","sunrise","sunset"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAA2D,OAA3D;;;AAGA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AAOrC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACK,aAAD,EAAgBC,SAAhB,IAA6BN,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC,CAXqC,CAerC;;AACA,QAAMW,SAAS,GAAG,EAAlB;AACA,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqBb,QAAQ,CAAC,IAAD,CAAnC,CAjBqC,CAmBrC;;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAM,IAAN,CAAtC;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,IAAD,CAA9C,CArBqC,CAuBrC;;AACA,QAAMkB,OAAO,GAAG,8BAAhB,CAxBqC,CA0BrC;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,KAAD,CAAtC,CA7BqC,CAgCrC;;AACA,QAAMyB,IAAqD,GAAG;AAC1DtB,IAAAA,IAAI,EAAEA,IADoD;AAE1DuB,IAAAA,IAAI,EAAEnB,IAFoD;AAG1DgB,IAAAA,OAAO,EAAEA;AAHiD,GAA9D,CAjCqC,CAuCrC;;AACA,QAAMI,QAAQ,GAAGf,MAAM,IAAIA,MAAM,CAACgB,MAAP,CAAcC,IAAI,IAAIlB,SAAS,CAACmB,IAAV,CAAeD,IAAI,CAACE,IAApB,CAAtB,CAA3B,CAxCqC,CAyCrC;;AACA,QAAMC,MAAM,GAAGrB,SAAS,CAACsB,IAAV,CAAeC,CAAC,IAAIT,IAAI,CAACtB,IAAL,KAAc+B,CAAlC,CAAf;AAGA,QAAMC,qBAAqB,GAAGrB,OAAO,IAAIA,OAAO,CAACsB,QAAR,CAAiBC,WAAjB,CAA6BC,GAA7B,CAAiCT,IAAI,IAAIA,IAAI,CAACU,KAA9C,CAAzC;AACA,QAAMC,gBAAgB,GAAGL,qBAAqB,IAAIA,qBAAqB,CAAC,CAAD,CAAvE;AAGAlC,EAAAA,SAAS,CAAC,MAAM;AACZF,IAAAA,KAAK,CAAC0C,GAAN,CAAU,yGAAV,EACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAAClB,IADrB,EAEKiB,IAFL,CAEUE,IAAI,IAAI/B,QAAQ,CAAC+B,IAAI,CAACC,MAAL,CAAY,CAACC,IAAD,EAAOC,IAAP,KAAgB,CAAC,GAAGD,IAAJ,EAAU,GAAGC,IAAI,CAACC,MAAlB,CAA5B,EAAuD,EAAvD,CAAD,CAF1B;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA/C,EAAAA,SAAS,CAAC,MAAM;AACZF,IAAAA,KAAK,CAAC0C,GAAN,CAAU,uBAAV,EACKC,IADL,CACUC,GAAG,IAAIM,OAAO,CAACC,GAAR,CAAYP,GAAZ,CADjB,EAEKQ,KAFL,CAEWC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAFlB;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMG,YAAY,GAAGvC,OAAO,CAACsB,QAAR,CAAiBC,WAAjB,CAA6BC,GAA7B,CAAiCT,IAAI,IAAIA,IAAI,CAACyB,GAA9C,CAArB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ;;AAKA,QAAME,WAAW,GAAIC,CAAD,IAAwC;AACxDA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIhC,IAAI,CAACtB,IAAL,KAAc,EAAd,IAAoBsB,IAAI,CAACC,IAAL,KAAc,EAAtC,EAAyC;AACrCuB,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAAyC,KAD7C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,SAaI;AACAnD,MAAAA,KAAK,CAAC2D,IAAN,CAAW,uBAAX,EAAoCjC,IAApC,EACAiB,IADA,CACKC,GAAG,IAAI5B,UAAU,CAAC4B,GAAG,CAAClB,IAAL,CADtB,EAEA0B,KAFA,CAEMC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAFb;AAGH;AAEJ,GArBD;;AA0BA,QAAMO,gBAAgB,GAAIH,CAAD,IAA4C;AACjEpD,IAAAA,OAAO,CAACoD,CAAC,CAACI,MAAF,CAASC,KAAV,CAAP;AAAwB,GAD5B;;AAGA,QAAMC,gBAAgB,GAAIN,CAAD,IAA4C;AACjEhD,IAAAA,OAAO,CAACgD,CAAC,CAACI,MAAF,CAASC,KAAV,CAAP;AACH,GAFD;;AAMA,sBACI;AAAA,4BACA;AAAA,iBACC7B,MAAM,KAAK,KAAX,GAAmB,wBAAnB,GAA6C,IAD9C,eAEA;AAAK,QAAA,SAAS,EAAC,6CAAf;AAAA,+BACA;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,MAAxB;AAA+B,YAAA,WAAW,EAAC,MAA3C;AAAkD,YAAA,QAAQ,EAAE2B,gBAA5D;AAA8E,YAAA,SAAS,EAAE3B,MAAM,KAAK,KAAX,GAAmB,0BAAnB,GAAgD;AAAzI;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKX,QAAQ,iBAAI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,MAAxB;AAA+B,YAAA,WAAW,EAAC,gBAA3C;AAA4D,YAAA,QAAQ,EAAEyC;AAAtE;AAAA;AAAA;AAAA;AAAA,kBAFjB,eAGI;AAAQ,YAAA,OAAO,EAAGP,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAFA,eASA;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA,gCACQ;AAAQ,UAAA,SAAS,EAAC,OAAlB;AAA0B,UAAA,OAAO,EAAI,MAAMjC,WAAW,CAAC,KAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR,eAEQ;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACA,YAAAA,WAAW,CAAC,IAAD,CAAX;AAAkB,WAA1C;AAA4C,UAAA,SAAS,EAAC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR,eAGQ;AAAQ,UAAA,OAAO,EAAE,MAAM;AAAEE,YAAAA,UAAU,CAAC,IAAD,CAAV;AAAkB,WAA3C;AAA6C,UAAA,SAAS,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHR;AAAA;AAAA;AAAA;AAAA;AAAA,cATA,EAcMV,OAAO,IAAMO,QAAQ,KAAK,KAA1B,iBACE;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACA;AAAA,iCAAWP,OAAO,CAACiD,QAAR,CAAiBhC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA,oCAAcjB,OAAO,CAACiD,QAAR,CAAiBC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,eAGA;AAAA,iCAAUlD,OAAO,CAACiD,QAAR,CAAiBE,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAMA;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACA;AAAK,YAAA,GAAG,EAAEnD,OAAO,CAACK,OAAR,CAAgB+C,SAAhB,CAA0BC,IAApC;AAA0C,YAAA,GAAG,EAAC,iCAA9C;AAAgF,YAAA,KAAK,EAAC,KAAtF;AAA4F,YAAA,MAAM,EAAC;AAAnG;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA,sBAAKrD,OAAO,CAACK,OAAR,CAAgB+C,SAAhB,CAA0BE;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAFA,eAGA;AAAA,mDAA4BtD,OAAO,CAACK,OAAR,CAAgBkD,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHA,eAIA;AAAA,sDAA+BvD,OAAO,CAACK,OAAR,CAAgBmD,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJA,eAKA;AAAA,qCAAcxD,OAAO,CAACK,OAAR,CAAgBoD,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,kBALA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfR,EA8BKzD,OAAO,IAAIO,QAAX,iBACG;AAAA;AAAA;AAAA;AAAA,cA/BR;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EA2CKmB,gBAAgB,iBACb;AAAA,8BACI;AAAA,gCAAaA,gBAAgB,CAACgC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BAAYhC,gBAAgB,CAACiC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YA5CR;AAAA,kBADJ;AAqDH;;GA3JuBvE,c;;KAAAA,c","sourcesContent":["import axios from \"axios\";\r\nimport {useState, useEffect, useMemo, SetStateAction} from \"react\"\r\n\r\n\r\nexport default function WeatherDisplay() {\r\n\r\n    \r\n    interface Data {\r\n        [country: string]: string[]\r\n    }\r\n\r\n    // the city input and the day input and History input\r\n    const [City, setCity] = useState(null)\r\n    const [citiesfromapi, setCities] = useState(null)\r\n    const [days, setDays] = useState(\"\")\r\n    const [check, setCheck] = useState(false)\r\n    \r\n    \r\n    \r\n    //the json data for the city validator\r\n    const jsonarray = []\r\n    const [Cities, setCitie] = useState(null)\r\n\r\n    //the weather data receiver\r\n    const [weather, setWeather] = useState<any>(null)\r\n    const [theforecast, settheForecast] = useState(null)\r\n\r\n    //the renderers depending on the filters used.\r\n    const message = \"Please enter a correct city!\"\r\n\r\n    //booleans for rendering different data\r\n    const [current, setCurrent] = useState(false)\r\n    const [Forecast, setForecast] = useState(false)\r\n    const [timings, setTimings] = useState(false)\r\n\r\n\r\n    //interface for post request data\r\n    const data: { City: string, Days: string, timings: boolean} = {\r\n        City: City,\r\n        Days: days,\r\n        timings: timings\r\n    }\r\n\r\n    //pushs all cities in world into array\r\n    const filterer = Cities && Cities.filter(item => jsonarray.push(item.name))\r\n    //returns true if city entered is actually a city.\r\n    const checks = jsonarray.some(x => data.City === x)\r\n\r\n\r\n    const timingofthecurrentday = weather && weather.forecast.forecastday.map(item => item.astro)\r\n    const astronomicalInfo = timingofthecurrentday && timingofthecurrentday[1]\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/countries%2Bcities.json\")\r\n            .then(res => res.data)\r\n            .then(res2 => setCitie(res2.reduce((prev, curr) => [...prev, ...curr.cities], [])))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:5000\")\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(\"request failed\"))\r\n    }, []) \r\n\r\n    const forecastdata = weather.forecast.forecastday.map(item => item.day)\r\n    console.log(forecastdata)\r\n    \r\n\r\n    \r\n\r\n    const handleClick = (e: { preventDefault: () => void; }) => {\r\n        e.preventDefault();\r\n        if (data.City === \"\" && data.Days === \"\"){\r\n            console.log(\"empty strings not allowed\")}\r\n        // } else if(checks && data.Days === \"\"){\r\n        //    axios.post(\"http://localhost:5000\", data)\r\n        //   .then(res => setWeather(res.data))\r\n        //   .then(secondresponse => settheForecast(null))\r\n        //   .catch(err => console.log(err))\r\n        // } else if (checks && data.Days !== \"\") {\r\n        //     axios.post(\"http://localhost:5000\", data)\r\n        //     .then(res => settheForecast(res.data))\r\n        //     .then(res2 => setWeather(null))\r\n        //     .catch(err => console.log(err))\r\n        // } \r\n        else{\r\n            axios.post(\"http://localhost:5000\", data)\r\n           .then(res => setWeather(res.data))\r\n           .catch(err => console.log(err))\r\n        }\r\n    \r\n    }\r\n\r\n    \r\n    \r\n  \r\n    const handlechangeCity = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCity(e.target.value)}\r\n\r\n    const handlechangeDays = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDays(e.target.value)\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n        <div>\r\n        {checks === false ? \"Enter the correct city\": null}\r\n        <div className=\"flex max-h-full justify-center items-center\">\r\n        <form>\r\n            <input type=\"text\" name=\"City\" placeholder=\"City\" onChange={handlechangeCity} className={checks === false ? \"border-2 border-rose-600\" : \"border-2 border-green-600\"}/>\r\n            {Forecast && <input type=\"text\" name=\"Days\" placeholder=\"Number of days\" onChange={handlechangeDays} />}\r\n            <button onClick= {handleClick}>Press here to send</button>\r\n        </form>\r\n        </div>\r\n        <div className=\"mb-9 min-h-[200px] block\">\r\n                <button className=\"block\" onClick = {() => setForecast(false)}>Current Weather</button>\r\n                <button onClick={() => {setForecast(true)}} className=\"block\">Forecast</button>\r\n                <button onClick={() => { setTimings(true) }} className=\"block\">Timings</button>\r\n        </div>\r\n            { weather  && (Forecast === false) && (\r\n                <div>\r\n                <div className=\"weatherdisplay\">\r\n                <h1>City: {weather.location.name}</h1>\r\n                <h2>Country: {weather.location.country}</h2>\r\n                <p>Time: {weather.location.localtime}</p>\r\n                </div>\r\n                <div className=\"weatherInfo\">\r\n                <img src={weather.current.condition.icon} alt=\"representation of the condition\" width=\"150\" height=\"150\"/>\r\n                <h2>{weather.current.condition.text}</h2>\r\n                <p>Temperature in Celsius: {weather.current.temp_c}</p>\r\n                <p>Temperature in Fahrenheit: {weather.current.temp_f}</p>\r\n                <p>Humidity: {weather.current.humidity}</p>\r\n                </div>\r\n                </div>\r\n            )} \r\n            {weather && Forecast && (\r\n                <div>\r\n             \r\n\r\n                </div>\r\n            \r\n            \r\n            \r\n            \r\n            )}       \r\n        </div>\r\n        \r\n            {astronomicalInfo && (\r\n                <div>\r\n                    <p>Sunrise: {astronomicalInfo.sunrise}</p>\r\n                    <p>Sunset: {astronomicalInfo.sunset}</p>\r\n                </div>\r\n            )}\r\n        \r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}